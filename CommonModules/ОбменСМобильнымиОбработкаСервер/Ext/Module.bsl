
#Область ПрограммныйИнтерфейс

// Выполняет обработку одного объекта .
//
// Параметры:
//  ДанныеОбъекта			 - Соответствие - Прочитанные данные объекта который нужно обработать;
//  ПисьмаКОтправке			 - Массив - Массив ссылок на письма, которые необходимо отправить после обработки всех XDTO сообщения;
//  СвязиКУстановке			 - Массив - Массив связей которые нужно установить между объектами;
//  ПараметрыСинхронизации	 - Структура - кешированные параметры обмена
//
Процедура ОбработатьДанныеОбъекта(ДанныеОбъекта, СвязиКУстановке, ПараметрыСинхронизации) Экспорт

	// ИмяТипа = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "ИмяТипа", "Строка");
	МобильныйКлиент = ПараметрыСинхронизации.МобильныйКлиент;
	
	// todo
	ВерсияКлиента = Неопределено;

	// КОМАНДЫ

	Если ДанныеОбъекта.Свойство("Connect") Тогда
		ПодключитьНовоеУстройство(ДанныеОбъекта.Connect, МобильныйКлиент);

	ИначеЕсли ДанныеОбъекта.Свойство("Disconnect") Тогда
		ОтключитьУстройство(ДанныеОбъекта.Disconnect, МобильныйКлиент);

	// todo
	ИначеЕсли ДанныеОбъекта.Свойство("NotificationSubscriberID") Тогда
		УстановитьИдентификаторПодписчика(ДанныеОбъекта.NotificationSubscriberID, МобильныйКлиент, ВерсияКлиента);

	// todo
	ИначеЕсли ДанныеОбъекта.Свойство("UsePushNotificatios") Тогда
		НастроитьУведомления(ДанныеОбъекта.UsePushNotificatios, МобильныйКлиент, ВерсияКлиента);

	КонецЕсли;
	
	// ПРИКЛАДНЫЕ ОБЪЕКТЫ

	Если ДанныеОбъекта.Свойство("Objects") Тогда
		ЗаписатьОбъекты(ДанныеОбъекта.Objects, МобильныйКлиент);	
	КонецЕсли;
	
	Если ДанныеОбъекта.Свойство("ClientInfo") Тогда
		ЗаписатьИнформациюОКлиенте(ДанныеОбъекта.ClientInfo, МобильныйКлиент);

	Иначе
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			НСтр("ru = 'В сообщении обнаружен неизвестный тип объекта '"), Ложь, МобильныйКлиент);
	КонецЕсли;
	
КонецПроцедуры

#КонецОбласти

#Область ОбработкаКоманд

Процедура ПодключитьНовоеУстройство(ДанныеОбъекта, МобильныйКлиент) Экспорт 

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Начало подключения нового клиента'"),
		Ложь, МобильныйКлиент);

	ПериодПервичнойЗагрузки = ДанныеОбъекта.InitialPeriod;
	Если Не ЗначениеЗаполнено(ПериодПервичнойЗагрузки) Тогда
		ПериодПервичнойЗагрузки = 7;
	КонецЕсли;
		
	РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ЗаписатьНастройку(
		ПользователиКлиентСервер.ТекущийПользователь(),
		Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки,
		ПериодПервичнойЗагрузки);

	УстановитьПривилегированныйРежим(Истина);
	ОбменСМобильнымиСервер.НайтиСоздатьЦентральныйУзелОбменаСМобильнымиКлиентами();
	УстановитьПривилегированныйРежим(Ложь);

	ПараметрыСинхронизации = 
		ОбменСМобильнымиСервер.ПолучитьПараметрыСинхронизации(ПользователиКлиентСервер.ТекущийПользователь());

	ОбменСМобильнымиРегистрацияИзмененийСервер.ЗарегистрироватьВсеОбъектыДляПервичнойЗагрузки(
		МобильныйКлиент, ПараметрыСинхронизации);
			
КонецПроцедуры

Процедура ОтключитьУстройство(ДанныеОбъекта, МобильныйКлиент)

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		НСтр("ru = 'Отключения мобильного клиента'"),
		Ложь,
		МобильныйКлиент);

	УстановитьПривилегированныйРежим(Истина);
	МобильныйКлиент.ПолучитьОбъект().УстановитьПометкуУдаления(Истина);

	ВызватьИсключение "СтопДальнейшейОбработки";

КонецПроцедуры

Процедура УстановитьИдентификаторПодписчика(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента)

	Идентификатор = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "SubscriberData", "ХранилищеЗначения");

	ИдентификаторПодписчика = Неопределено;

	ТекстИдентификатора = Идентификатор.Получить();
	Если Не ТекстИдентификатора = Неопределено Тогда

		Чтение = Новый ЧтениеXML();
		Чтение.УстановитьСтроку(ТекстИдентификатора);

		Попытка

			Сериализатор = Новый СериализаторXDTO(ФабрикаXDTO);

			XDTOИдентификатор = ФабрикаXDTO.ПрочитатьXML(Чтение);
			ИдентификаторПодписчика = Сериализатор.ПрочитатьXDTO(XDTOИдентификатор);

		Исключение

			Инфо = ИнформацияОбОшибке();

			ТекстИнформации = 
				НСтр("ru = 'Не удалось распознать идентификатор подписчика доставляемых уведомлений:
					|%1'");

			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
				СтрШаблон(ТекстИнформации, ПодробноеПредставлениеОшибки(Инфо)), 
				Ложь, МобильныйКлиент);

		КонецПопытки;

	КонецЕсли;

	Объект = МобильныйКлиент.ПолучитьОбъект();
	Объект.ИдентификаторКлиента = 
		Новый ХранилищеЗначения(ИдентификаторПодписчика, Новый СжатиеДанных(9));

	Объект.Записать();

КонецПроцедуры

Процедура НастроитьУведомления(ДанныеОбъекта, МобильныйКлиент, ВерсияКлиента)

	Использование = ПолучитьЗначениеРеквизита(ДанныеОбъекта, "UsePush", "Булево");

	Объект = МобильныйКлиент.ПолучитьОбъект();
	Объект.ИдентификаторУстановлен = Использование;

	Если Не Использование Тогда

		Объект.ИдентификаторКлиента = Неопределено;

	КонецЕсли;

	Объект.Записать();

	ВызватьИсключение "СтопДальнейшейОбработки";

КонецПроцедуры

#КонецОбласти


#Область ПрикладныеОбъекты

Процедура ЗаписатьИнформациюОКлиенте(ДанныеОбъекта, МобильныйКлиент)

	Версия = ДанныеОбъекта.AppVersion;
	Система = ДанныеОбъекта.OS;
	Память = ДанныеОбъекта.RAM;
	ИмяУстройства = ДанныеОбъекта.DeviceName;
	РазмерЭкрана = ДанныеОбъекта.ScreenSize;
	
	ПредставлениеУстройства = 
		СтрШаблон(НСтр("ru = 'Версия:%1, ОС:%2, ОЗУ:%3, WS:%4, Экран:%5""'"),
			Версия, Система, Память, ИмяУстройства, РазмерЭкрана);

	РегистрыСведений.СведенияОМобильныхКлиентах.ЗаписатьСведенияОКлиенте(
		МобильныйКлиент, ТекущаяДатаСеанса(), ПредставлениеУстройства, Версия);

КонецПроцедуры

Функция ЗаписатьОбъекты(Объекты, МобильныйКлиент) Экспорт
	
	Для Каждого Объект Из Объекты Цикл
						
		Если НРег(Объект.Тип) = НРег(ОбменСМобильнымиКлиентСервер.Сущность_ЗаявкаНаОбслуживание()) Тогда
			ЗаписатьЗаявкуНаОбслуживание(Объект, МобильныйКлиент);
			
		ИначеЕсли НРег(Объект.Тип) = НРег(ОбменСМобильнымиКлиентСервер.Сущность_ЗаключениеДоговораАренды()) Тогда
			// ЗаписатьЗаключениеДоговораАренды(Объект, МобильныйКлиент);
			
		ИначеЕсли НРег(Объект.Тип) = НРег(ОбменСМобильнымиКлиентСервер.Сущность_ДополнительноеСоглашение()) Тогда
			// ЗаписатьДополнительноеСоглашение(Объект, МобильныйКлиент);
			
		ИначеЕсли НРег(Объект.Тип) = НРег(ОбменСМобильнымиКлиентСервер.Сущность_РасторжениеДоговораАренды()) Тогда
			// ЗаписатьРасторжениеДоговораАренды(Объект, МобильныйКлиент);
			
		ИначеЕсли НРег(Объект.Тип) = НРег(ОбменСМобильнымиКлиентСервер.Сущность_СчетНаАренду()) Тогда
			// ЗаписатьСчетНаАренду(Объект, МобильныйКлиент);
			
		Иначе
			РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
				СтроковыеФункцииКлиентСервер.ПодставитьПараметрыВСтроку(
					НСтр("ru = 'В сообщении обнаружен неизвестный тип объекта (%1)'"), Объект.Тип),
				Ложь, 
				МобильныйКлиент);		
		КонецЕсли;
	КонецЦикла;		
		
КонецФункции

// Справочники

Функция ЗаписатьОбъектАренды(СтруктураДанныхОбъекта, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(
		СтруктураДанныхОбъекта.Тип, СтруктураДанныхОбъекта.UUID);	

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ОбъектыАренды.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");	
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
		
	Если Не КраткаяЗапись Тогда	
		Если СтруктураДанныхОбъекта.Родитель <> Неопределено Тогда
			РодительСсылка = Неопределено;
			Если ЗначениеЗаполнено(СтруктураДанныхОбъекта.Родитель.UUID) Тогда
				РодительСсылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
					СтруктураДанныхОбъекта.Родитель.UUID);
					
				РодительОбъект = РодительСсылка.ПолучитьОбъект();
				Если РодительОбъект = Неопределено Тогда
					РодительОбъект = Справочники.ОбъектыАренды.СоздатьЭлемент();
					РодительОбъект.Код = СтруктураДанныхОбъекта.Родитель.Код;
					РодительОбъект.УстановитьСсылкуНового(РодительСсылка);
					РодительОбъект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
					РодительОбъект.Записать();			
					
					РодительСсылка = РодительОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;	
			Объект.Родитель = РодительСсылка;			
		КонецЕсли;
			
		Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
		Объект.Записать();

		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	Иначе
		Объект.Записать();
	КонецЕсли;

	Возврат Объект.Ссылка;
	
КонецФункции

Функция ЗаписатьЭлементОбъектовАренды(СтруктураДанныхОбъекта, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ЭлементыОбъектовАренды.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;

	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");

	Если Не КраткаяЗапись Тогда
		Если СтруктураДанныхОбъекта.Родитель <> Неопределено Тогда
			РодительСсылка = Неопределено;
			Если ЗначениеЗаполнено(СтруктураДанныхОбъекта.Родитель.UUID) Тогда
				РодительСсылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
					СтруктураДанныхОбъекта.Родитель.UUID);
					
				РодительОбъект = РодительСсылка.ПолучитьОбъект();
				Если РодительОбъект = Неопределено Тогда
					РодительОбъект = Справочники.ЭлементыОбъектовАренды.СоздатьЭлемент();
					РодительОбъект.Код = СтруктураДанныхОбъекта.Родитель.Код;
					РодительОбъект.УстановитьСсылкуНового(РодительСсылка);
					РодительОбъект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
					РодительОбъект.Записать();			
					
					РодительСсылка = РодительОбъект.Ссылка;
				КонецЕсли;
			КонецЕсли;	
			Объект.Родитель = РодительСсылка;			
		КонецЕсли;
				
		Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
		Объект.Записать();

		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	Иначе
		Объект.Записать();
	КонецЕсли;

	Возврат Объект.Ссылка;
		
КонецФункции

Функция ЗаписатьОрганизацию(СтруктураДанныхОбъекта, КраткаяЗапись = Ложь)

	Если СтруктураДанныхОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Организации.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
		
	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");

	Если Не КраткаяЗапись Тогда
		Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
		Объект.Записать();
		
		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	Иначе
		Объект.Записать();
	КонецЕсли;
	
	Возврат Объект.Ссылка;	
	
КонецФункции

Функция ЗаписатьКонтрагента(СтруктураДанныхОбъекта, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.Контрагенты.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
		
	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
	
	Если Не КраткаяЗапись Тогда
		Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
		Объект.Записать();

		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	Иначе
		Объект.Записать();
	КонецЕсли;

	Возврат Объект.Ссылка;		
	
КонецФункции

Функция ЗаписатьДоговорКонтрагента(СтруктураДанныхОбъекта, КраткаяЗапись = Ложь)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Справочники.ДоговорыКонтрагентов.СоздатьЭлемент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Код = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Код", "Строка");
	Объект.Наименование = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Наименование", "Строка");
	
	Если Не КраткаяЗапись Тогда		
		Объект.Владелец = ПолучитьСсылку(СтруктураДанныхОбъекта.Владелец);
	
	//Если СтруктураДанныхОбъекта.Владелец <> Неопределено Тогда
	//	ВладелецСсылка = Неопределено;
	//	Если ЗначениеЗаполнено(СтруктураДанныхОбъекта.Владелец.UUID) Тогда
	//		ВладелецСсылка = ОбменВызовСервераПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Владелец.Тип,
	//			СтруктураДанныхОбъекта.Владелец.UUID);
	//			
	//		ВладелецОбъект = ВладелецСсылка.ПолучитьОбъект();
	//		Если ВладелецОбъект = Неопределено Тогда
	//			ВладелецОбъект = Справочники.Контрагенты.СоздатьЭлемент();
	//			ВладелецОбъект.Код = СтруктураДанныхОбъекта.Владелец.Код;
	//			ВладелецОбъект.УстановитьСсылкуНового(ВладелецСсылка);
	//			ВладелецОбъект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	//			ВладелецОбъект.Записать();			
	//			
	//			ВладелецСсылка = ВладелецОбъект.Ссылка;
	//		КонецЕсли;
	//	КонецЕсли;	
	//	Объект.Владелец = ВладелецСсылка;			
	//КонецЕсли;

		Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);		
		Объект.Записать();
		РегистрыСведений.ДатыЗагрузкиОбъектов.ОбновитьДатуПоследнегоИзмененияОбъекта(Объект.Ссылка);
	Иначе
		Объект.Записать();
	КонецЕсли;

	Возврат Объект.Ссылка;		
	
КонецФункции

// Документы

Функция ЗаписатьЗаявкуНаОбслуживание(СтруктураДанныхОбъекта, МобильныйКлиент)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ЗаявкаНаОбслуживание.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Дата", "Дата");
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Номер", "Строка");
	
	Объект.Организация = ПолучитьСсылку(СтруктураДанныхОбъекта.Организация);
	Объект.Контрагент = ПолучитьСсылку(СтруктураДанныхОбъекта.Контрагент);
	Объект.ДоговорКонтрагента = ПолучитьСсылку(СтруктураДанныхОбъекта.ДоговорКонтрагента);
	Объект.ОбъектАренды = ПолучитьСсылку(СтруктураДанныхОбъекта.ОбъектАренды);
	Объект.ЭлементОбъекта = ПолучитьСсылку(СтруктураДанныхОбъекта.ЭлементОбъекта);
	Объект.ОписаниеЗаявки = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ОписаниеЗаявки", "Строка");
	Объект.СтатусЗаявки = Перечисления.СтатусыЗаявокНаОбслуживание[СтруктураДанныхОбъекта.СтатусЗаявки];
	Объект.Комментарий = СтруктураДанныхОбъекта.Комментарий;
	
	Объект.ДатаВыполненияРабот = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ДатаВыполненияРабот", "Дата");
	Объект.РучнаяКорректировка = СтруктураДанныхОбъекта.РучнаяКорректировка;
	
	// todo
	// Объект.Ответственный = СтруктураДанныхОбъекта.Ответственный;
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("МобильныйКлиент", МобильныйКлиент);
	
	Объект.Записать();

	Возврат Объект.Ссылка;
	
КонецФункции

Функция ЗаписатьЗаключениеДоговораАренды(СтруктураДанныхОбъекта, МобильныйКлиент)
		
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ЗаключениеДоговораАренды.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Дата", "Дата");
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Номер", "Строка");
	
	Объект.Организация = ПолучитьСсылку(СтруктураДанныхОбъекта.Организация);
	Объект.Контрагент = ПолучитьСсылку(СтруктураДанныхОбъекта.Контрагент);
	Объект.ДоговорКонтрагента = ПолучитьСсылку(СтруктураДанныхОбъекта.ДоговорКонтрагента);
	Объект.ДатаЗаключенияДоговора = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ДатаЗаключенияДоговора", "Дата");
	Объект.ДатаОкончанияДоговора  = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ДатаОкончанияДоговора", "Дата");
	
	Объект.Комментарий = СтруктураДанныхОбъекта.Комментарий;	
	Объект.Ответственный = СтруктураДанныхОбъекта.Ответственный;
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("МобильныйКлиент", МобильныйКлиент);

	Объект.Записать();

	Возврат Объект.Ссылка;	
	
КонецФункции

Функция ЗаписатьДополнительноеСоглашение(СтруктураДанныхОбъекта, МобильныйКлиент)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.ДополнительноеСоглашение.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Дата", "Дата");
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Номер", "Строка");
	
	Объект.ДокументОснование = ПолучитьСсылку(СтруктураДанныхОбъекта.ДокументОснование);
	Объект.Организация = ПолучитьСсылку(СтруктураДанныхОбъекта.Организация);
	Объект.Контрагент = ПолучитьСсылку(СтруктураДанныхОбъекта.Контрагент);
	Объект.ДоговорКонтрагента = ПолучитьСсылку(СтруктураДанныхОбъекта.ДоговорКонтрагента);
	Объект.ДатаЗаключенияДоговора = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ДатаЗаключенияДоговора", "Дата");
	Объект.ДатаОкончанияДоговора  = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ДатаОкончанияДоговора", "Дата");;
	
	Объект.Комментарий = СтруктураДанныхОбъекта.Комментарий;	
	Объект.Ответственный = СтруктураДанныхОбъекта.Ответственный;
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("МобильныйКлиент", МобильныйКлиент);

	Объект.Записать();

	Возврат Объект.Ссылка;	
	
КонецФункции

Функция ЗаписатьРасторжениеДоговораАренды(СтруктураДанныхОбъекта, МобильныйКлиент)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.РасторжениеДоговораАренды.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Дата", "Дата");
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Номер", "Строка");
	
	Объект.ДокументОснование = ПолучитьСсылку(СтруктураДанныхОбъекта.ДокументОснование);
	Объект.Организация = ПолучитьСсылку(СтруктураДанныхОбъекта.Организация);
	Объект.Контрагент = ПолучитьСсылку(СтруктураДанныхОбъекта.Контрагент);
	Объект.ДоговорКонтрагента = ПолучитьСсылку(СтруктураДанныхОбъекта.ДоговорКонтрагента);
	Объект.СуммаЗалога = СтруктураДанныхОбъекта.СуммаЗалога;
	Объект.ДатаОкончанияДоговора  = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "ДатаОкончанияДоговора", "Дата");;
	
	Объект.Комментарий = СтруктураДанныхОбъекта.Комментарий;	
	Объект.Ответственный = СтруктураДанныхОбъекта.Ответственный;
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("МобильныйКлиент", МобильныйКлиент);
	
	Объект.Записать();

	Возврат Объект.Ссылка;	
	
КонецФункции

Функция ЗаписатьСчетНаАренду(СтруктураДанныхОбъекта, МобильныйКлиент)
	
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип,
		СтруктураДанныхОбъекта.UUID);
		
	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = Документы.СчетНаАренду.СоздатьДокумент();
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
	
	Объект.Дата = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Дата", "Дата");
	Объект.Номер = ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, "Номер", "Строка");
	
	// todo
	
	Объект.ДополнительныеСвойства.Вставить("Загрузка", Истина);
	Объект.ДополнительныеСвойства.Вставить("МобильныйКлиент", МобильныйКлиент);
	
	Объект.Записать();

	Возврат Объект.Ссылка;	
	
КонецФункции

#КонецОбласти


// СЛУЖЕБНЫЕ ПРОЦЕДУРЫ И ФУНКЦИИ

#Область СлужебныеПроцедурыИФункции

Функция ПолучитьСсылку(СтруктураДанныхОбъекта)
	
	Если СтруктураДанныхОбъекта = Неопределено Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Если СтруктураДанныхОбъекта.UUID = "00000000-0000-0000-0000-000000000000" Тогда
		Возврат Неопределено;
	КонецЕсли;
	
	Результат = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(
		СтруктураДанныхОбъекта.Тип, СтруктураДанныхОбъекта.UUID);
		
	Если Не ЗначениеЗаполнено(Результат) Тогда
		Результат = ЗаписатьПростойОбъект(СтруктураДанныхОбъекта);
	КонецЕсли;
	
	Возврат Результат;
	
КонецФункции

Функция ЗаписатьПростойОбъект(СтруктураДанныхОбъекта)
		
	Ссылка = ОбменСМобильнымиСерверПовтИсп.ПолучитьСсылкуПоТипу(СтруктураДанныхОбъекта.Тип, 
		СтруктураДанныхОбъекта.UUID);

	Объект = Ссылка.ПолучитьОбъект();
	Если Объект = Неопределено Тогда
		Объект = ОбменСМобильнымиСерверПовтИсп.СоздатьОбъектПоТипу(СтруктураДанныхОбъекта);
		Объект.УстановитьСсылкуНового(Ссылка);
	КонецЕсли;
		
КонецФункции

// Получает значение указанного реквизита из прочитанных данных
//
// Параметры:
//  СтруктураДанныхОбъекта	 - Соответствие - Предварительно прочитанные значения реквизитов объекта;
//  ИмяРеквизита			 - Строка - Имя получаемого реквизита объекта;
//  ИмяТипа					 - Строка - Тип к которому преобразуются данные из XML-строки;
//  Обязательный			 - Булево - Признак обязательного реквизита.
// 
// Возвращаемое значение:
//  Значение - Значение запрошенного типа.
//
Функция ПолучитьЗначениеРеквизита(СтруктураДанныхОбъекта, ИмяРеквизита, ИмяТипа = Неопределено, 
		Обязательный = Ложь)

	Значение = СтруктураДанныхОбъекта[ВРег(ИмяРеквизита)];

	// Читаем значение атрибута из потока данных
	Если Значение = Неопределено Тогда
		Если Обязательный Тогда			
			ТекстСообщения = НСтр("ru = 'Для ""%1"" отсутствует ожидаемый атрибут (%2)';
					  |en = 'Attribute ""%2"" expected for ""%1""'");
			ВызватьИсключение 
				СтрШаблон(ТекстСообщения, СтруктураДанныхОбъекта["ИмяТипа"], ИмяРеквизита);
		Иначе
			Возврат Значение;
		КонецЕсли;
	КонецЕсли;

	// Получаем значение нужного типа 
	Если ИмяТипа = Неопределено Тогда
		Возврат Значение;
	Иначе
		Возврат XMLЗначение(Тип(ИмяТипа), Значение);
	КонецЕсли;

КонецФункции

#КонецОбласти