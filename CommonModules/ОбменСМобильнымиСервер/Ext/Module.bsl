
// Проверяет возможность работы с мобильного клиента для текущего пользователя.
// Вызывает исключение в случае отсутсвия разрешения.
// Параметры
// 	Пользователь - ссылка на пользователя
Функция ПроверитьВозможностьПодключенияМобильногоКлиента(ТекущийПользователь) Экспорт

	РС = РегистрыСведений.РазрешенныеМобильныеПользователи;
	
	Если Не РС.ИспользованиеМобильногоКлиентаРазрешено(ТекущийПользователь) Тогда
		Возврат Ложь;
	КонецЕсли;

	Возврат Истина;

КонецФункции

//Создает и настраивает центральный узел обмена с мобильными устройствами.
//
Процедура НайтиСоздатьЦентральныйУзелОбменаСМобильнымиКлиентами() Экспорт

	УзелОбмена = ПланыОбмена.Мобильный.ЭтотУзел().ПолучитьОбъект();
	Если Не ЗначениеЗаполнено(УзелОбмена.Код) Тогда
		УзелОбмена.Код          = "001";
		УзелОбмена.Наименование = НСтр("ru='Центральный'");
		УзелОбмена.Записать();
	КонецЕсли;

КонецПроцедуры

#Область РаботаССообщениямиОбмена

// Выполняет запуск фонового задания обработки данных с мобильного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  ИмяМетода       - Строка - Имя метода который будет запущен как фоновое задание.
//
Процедура ЗапуститьФоновоеЗаданиеОбработкиДанных(МобильныйКлиент, ИмяМетода) Экспорт

	// В клиент-серверном варианте и в файловом 8.3 сообщение принимается и готовится в 
	// фоновом задании. Это позволяет избежать таймаутов на стороне мобильного клиента, 
	// т.к. сообщение может долго приниматься и готовиться.

	СтруктураОтбора = Новый Структура("Наименование", МобильныйКлиент.Код);
	МассивЗаданий   = ФоновыеЗадания.ПолучитьФоновыеЗадания(СтруктураОтбора);

	ЕстьАктивноеЗадание = Ложь;
	Для Каждого ФоновоеЗадание Из МассивЗаданий Цикл

		Если ФоновоеЗадание.Состояние = СостояниеФоновогоЗадания.Активно Тогда
			ЕстьАктивноеЗадание = Истина;
			Прервать;
		КонецЕсли;

	КонецЦикла;

	Если Не ЕстьАктивноеЗадание Тогда

		// Создание в очереди сообщений нового сообщения с процентом готовности 0.
		// Это сообщение будет наполнять запускаемое фоновое задание
		ИсходящееСообщение = СоздатьНовоеСообщение(МобильныйКлиент);

		МассивПараметров = Новый Массив;
		МассивПараметров.Добавить(МобильныйКлиент);
		МассивПараметров.Добавить(ИсходящееСообщение);

		ФоновоеЗадание = ФоновыеЗадания.Выполнить(
			ИмяМетода, 
			МассивПараметров, 
			Новый УникальныйИдентификатор(),// уникальный идентификатор фонового задания
			МобильныйКлиент.Код); // наименование фонового задания

	КонецЕсли;

КонецПроцедуры

// Создание нового сообщения интегрированных систем и помещение его в очередь. У сообщения 
// устанавливается признак того, что оно находится в стадии подготовки (процент готовности = 0).
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
// 
// Возвращаемое значение:
//  СправочникСсылка.СообщенияИнтегрированныхСистем - Ссылка на сообщение.
//
Функция СоздатьНовоеСообщение(МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор);
	Сообщение.Входящее = Ложь;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();

	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(
		МобильныйКлиент,
		Сообщение);

	// Установка у сообщения степени готовности 0%
	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
		Сообщение, 0);

	Возврат Сообщение.Ссылка;

КонецФункции

// Получает массив еще не обработанных входящих сообщений от указанного клиента.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
// 
// Возвращаемое значение:
//  Массив - Необработанные входящие сообщения.
//
Функция ПолучитьВходящиеНеобработанныеСообщения(МобильныйКлиент) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Запрос = Новый Запрос;
	Запрос.УстановитьПараметр("МобильныйКлиент", МобильныйКлиент);
	Запрос.Текст = 
		"ВЫБРАТЬ
		|	СообщенияИнтегрированныхСистем.Ссылка
		|ИЗ
		|	Справочник.СообщенияИнтегрированныхСистем КАК СообщенияИнтегрированныхСистем
		|		ВНУТРЕННЕЕ СОЕДИНЕНИЕ РегистрСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами КАК ОчередиСообщенийОбменаСМобильнымиКлиентами
		|		ПО СообщенияИнтегрированныхСистем.Очередь = ОчередиСообщенийОбменаСМобильнымиКлиентами.Очередь
		|ГДЕ
		|	СообщенияИнтегрированныхСистем.Входящее = ИСТИНА
		|	И СообщенияИнтегрированныхСистем.ДатаОбработки = ДАТАВРЕМЯ(1, 1, 1)
		|	И ОчередиСообщенийОбменаСМобильнымиКлиентами.МобильныйКлиент = &МобильныйКлиент
		|	И СообщенияИнтегрированныхСистем.ПометкаУдаления = ЛОЖЬ
		|
		|УПОРЯДОЧИТЬ ПО
		|	СообщенияИнтегрированныхСистем.ДатаСоздания";

	Возврат Запрос.Выполнить().Выгрузить().ВыгрузитьКолонку(0);

КонецФункции

// todo: delete
// Вычисляет формат сообщения обмена от клиента и выполняет обработку сообщения в соответствии
//  с версией формата.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  Сообщение		 - СправочникСсылка.СообщенияИнтегрированныхСистем - Ссылка на входящее сообщение;
//  ВерсияКлиента	 - Строка - Версия формат обмена.
// 
// Возвращаемое значение:
//  Булево - Истина, если сообщение обработано.
//
Функция ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение, ВерсияКлиента = Неопределено) Экспорт

	Возврат ОбменСМобильнымиСообщенияСервер.ОбработатьВходящееСообщение(МобильныйКлиент, Сообщение);

КонецФункции

// Записывает в очередь входящее сообщение
//
// Параметры:
//  МобильныйКлиент 	 - ПланОбменаСсылка.Мобильный - Ссылка на узел;
//  СообщениеОтСервера	 - ОбъектXDTO - Полученные сервером данные.
//
Процедура ЗаписатьВходящееСообщение(МобильныйКлиент, СообщениеОтСервера) Экспорт

	ДанныеСообщения = СообщениеОтСервера.exchangeData;
	
	// todo: delete
	//Если ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ХранилищеЗначения") Тогда
	//	ДанныеСообщения = СообщениеОтСервера.exchangeData.Получить();

	//ИначеЕсли ТипЗнч(СообщениеОтСервера.exchangeData) = Тип("ДвоичныеДанные") Тогда
	//	ДанныеСообщения = СообщениеОтСервера.exchangeData;

	//КонецЕсли;

	Если ДанныеСообщения = Неопределено Тогда
		Возврат;
	КонецЕсли;

	Сообщение = Справочники.СообщенияИнтегрированныхСистем.СоздатьЭлемент();
	Сообщение.ИдентификаторСообщения = Строка(Новый УникальныйИдентификатор());
	Сообщение.Входящее = Истина;
	Сообщение.ДатаСоздания = ТекущаяДатаСеанса();
	Сообщение.ДанныеСообщения = 
		Новый ХранилищеЗначения(СообщениеОтСервера.exchangeData, Новый СжатиеДанных(9));

	Сообщение.Записать();

	РегистрыСведений.ОчередиСообщенийОбменаСМобильнымиКлиентами.ПоместитьСообщениеВОчередь(
		МобильныйКлиент,
		Сообщение);

	// todo: delete
	//РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьРазмер(
	//	Сообщение.Ссылка,
	//	ДанныеСообщения.Размер());

КонецПроцедуры

#КонецОбласти // Работа с сообщениями обмена

// Получает часто используемые параметры синхронизации для обмена с мобильным клиентом
// Параметры:
//	Пользователь - Ссылка на пользователя
Функция ПолучитьПараметрыСинхронизации(Пользователь) Экспорт

	ПараметрыСинхронизации = Новый Структура();

	ПараметрыСинхронизации.Вставить("СинхронизацияСписанийДенежныхСредств",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СинхронизацияСписанийДенежныхСредств));

	ПараметрыСинхронизации.Вставить("МаксимальныйРазмерФайла",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.МаксимальныйРазмерФайлов));

	ПараметрыСинхронизации.Вставить("ПериодПервичнойЗагрузки",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПериодПервичнойЗагрузки));

	ПараметрыСинхронизации.Вставить("СрокУстареванияДанных",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.СрокУстареванияДанных));

	ПараметрыСинхронизации.Вставить("ФильтроватьФайлыПоФормату",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ОграничениеФорматовПередаваемыхФайлов));

	ПараметрыСинхронизации.Вставить("ФорматыПередаваемыхФайлов",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ФорматыПередаваемыхФайлов));

	ПараметрыСинхронизации.Вставить("ПодробныйПротоколОбмена",
		РегистрыСведений.ОбменСМобильнымиНастройкиПользователей.ПолучитьНастройку(
			Пользователь,
			Перечисления.ОбменСМобильнымиТипыНастроекПользователей.ПодробныйПротоколОбменаСМобильнымУстройством));

	ПараметрыСинхронизации.Вставить("ОбщиеПраваНаОбъекты", Новый Соответствие());
	ПараметрыСинхронизации.Вставить("ПротоколируемыеТипы", Новый Соответствие());

	Если ПараметрыСинхронизации.ПодробныйПротоколОбмена Тогда
		
		ПараметрыСинхронизации.ПротоколируемыеТипы.Вставить(
			Тип("ДокументСсылка.ЗаявкаНаОбслуживание"), Тип("ДокументСсылка.ЗаявкаНаОбслуживание"));

	КонецЕсли;

	Возврат ПараметрыСинхронизации;

КонецФункции

// Формирует шаг отображения готовности для ускорения вывода данных в зависимости от их объема.
//
// Параметры:
//  КоличествоОбъектовВсего	 - Число - Количество объектов в выборке.
// 
// Возвращаемое значение:
//  Число - Шаг отображения изменений процента готовности.
//
Функция ПолучитьШагОтображенияПроцентаГотовности(КоличествоОбъектовВсего) Экспорт

	// Выводим каждые 5%.
	Шаг = Окр(КоличествоОбъектовВсего / 100 * 5);

	Если Шаг = 0 Тогда
		Шаг = 1;
	КонецЕсли;

	Возврат Шаг;

КонецФункции

// Проверяет, существует ли указанный объект в базе данных
Функция ЭлементДанныхСуществуетВБазе(ЭлементДанных) Экспорт

	ЭлементСуществует = Истина;

	Если ТипЗнч(ЭлементДанных) = Тип("ИнформацияОбОшибке")
		Или ТипЗнч(ЭлементДанных) = Тип("УдалениеОбъекта") Тогда 
		Возврат ЭлементСуществует;
	КонецЕсли;

	Попытка

		Если ТипЗнч(ЭлементДанных) = Тип("Структура") Тогда
			Объект = ЭлементДанных.Ссылка;
		Иначе
			Объект = ЭлементДанных;
		КонецЕсли;

		МетаданныеЭлементаДанных = Объект.Метаданные();

		Если ОбщегоНазначения.ЭтоСправочник(МетаданныеЭлементаДанных)
		 Или ОбщегоНазначения.ЭтоДокумент(МетаданныеЭлементаДанных) Тогда

			ЭлементСуществует = ОбщегоНазначения.СсылкаСуществует(Объект);

		КонецЕсли;

	Исключение
		ЭлементСуществует = Истина;
	КонецПопытки;

	Возврат ЭлементСуществует;

КонецФункции

// Проверяет доступность по правам указанного объекта для пользователя мобильного клиента
// Параметры:
//	МобильныйКлиент - ссылка на узел плана обмена Мобильный
//	Объект - ссылка на проверяемый объект
Функция ОбъектДоступенТекущемуПользователю(МобильныйКлиент, Объект, ОбщиеПраваНаОбъекты = Неопределено) Экспорт

	УстановитьПривилегированныйРежим(Истина);

	Пользователь = ПользователиКлиентСервер.ТекущийПользователь();
	Попытка

		Если Не ОбщегоНазначения.ЭтоСправочник(Объект.Метаданные())
			И Не ОбщегоНазначения.ЭтоДокумент(Объект.Метаданные()) Тогда
			Возврат Истина;
		КонецЕсли;

		Если Объект.Метаданные().Имя = "УдалитьШаблоныТекстовПисем" Тогда
			Возврат Объект.Владелец = Пользователь;
		КонецЕсли;

		Если Объект.Метаданные().Имя = "ШаблоныТекстов" Тогда
			Возврат Объект.Автор = Пользователь;
		КонецЕсли;

		// todo
		//ПраваПоОбъекту = ДокументооборотПраваДоступа.ПолучитьПраваПоОбъекту(
		//	Объект, Пользователь);

		// Возврат ПраваПоОбъекту.Чтение;
		Возврат Истина;

	Исключение
		// У передаваемого объекта невозможно получить метаданные - пропускаем его к передаче.
		Возврат Истина;
	КонецПопытки;

КонецФункции

// todo: delete
// Процедура - Разбить данные из файла на части и записать в сообщение обмена
//
// Параметры:
//  МобильныйКлиент		 - ПланОбменаСсылка.Мобильный	 - Узел обмен мобильного клиента;
//  ИсходящееСообщение	 - СправочникСсылка.СообщенияИнтегрированныхСистем - Формируемое сообщение обмена;
//  ИмяВременногоФайла	 - Строка - Имя файла с записанными данными;
//  НачалоЗаполнения	 - Число  - Дата начала формирования файлов (в миллисекундах);
//  КоличествоОбъектов	 - Число  - Количество выгруженных объектов.
//
Процедура РазбитьДанныеИзФайлаНаЧастиИЗаписатьВСообщениеОбмена(МобильныйКлиент, ИсходящееСообщение, 
	ИмяВременногоФайла, НачалоЗаполнения, КоличествоОбъектов) Экспорт

	ДвоичныеДанныеСообщения = Новый ДвоичныеДанные(ИмяВременногоФайла);

	// Файл с сообщением обмена разделяется на части по 5 Мб для стабилизации передачи на мобильный клиент
	МассивЧастейФайла = РазделитьФайл(ИмяВременногоФайла, 5 * 1024 * 1024);

	МассивЧастей = Новый Массив;
	Для Каждого ИмяФайла Из МассивЧастейФайла Цикл

		ДвоичныеДанные = Новый ДвоичныеДанные(ИмяФайла);

		// Каждая часть сообщения максимально сжимается
		МассивЧастей.Добавить(Новый ХранилищеЗначения(ДвоичныеДанные, Новый СжатиеДанных(9)));

		УдалитьФайлы(ИмяФайла);

	КонецЦикла;

	// Запись массива частей файла в содержательную часть сообщения интегрированных систем
	СообщениеОбъект = ИсходящееСообщение.ПолучитьОбъект();
	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(МассивЧастей);
	СообщениеОбъект.Записать();

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
		ИсходящееСообщение,
		ДвоичныеДанныеСообщения.Размер(),
		КоличествоОбъектов);

	ОкончаниеЗаполнения = ТекущаяУниверсальнаяДатаВМиллисекундах();

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьВремяФормирования(
		ИсходящееСообщение,
		(ОкончаниеЗаполнения - НачалоЗаполнения)/1000);

	// Установка отметки о 100% готовности сообщения после выполнения всех действий по подготовке сообщения.
	// После установки степени готовности в 100% сообщение может быть передано на клиента.
	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
		ИсходящееСообщение, 100);

	УдалитьФайлы(ИмяВременногоФайла);

	РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
		СтрШаблон(
			НСтр("ru = 'Подготовлено сообщение объемом %1 байт'"),
				Строка(ДвоичныеДанныеСообщения.Размер())),
		Ложь,
		МобильныйКлиент);

КонецПроцедуры

// Записывает данные обмена из временного файл и устанавливает процент готовности сообщения равным 100.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  ИмяВременногоФайла	 - Строка - Имя файла для записи данных обмена;
//  КоличествоОбъектов	 - Число - Количество выгруженных объектов.
//
Процедура ЗаписатьДанныеОбмена(МобильныйКлиент, Сообщение) Экспорт

	// todo
	//ДвоичныеДанныеФайла = Новый ДвоичныеДанные(ИмяВременногоФайла);

	//МассивДанных = Новый Массив;
	//МассивДанных.Добавить(Новый ХранилищеЗначения(ДвоичныеДанныеФайла, Новый СжатиеДанных(9)));


	СообщениеСсылка = СоздатьНовоеСообщение(МобильныйКлиент);

	СообщениеОбъект = СообщениеСсылка.ПолучитьОбъект();

	СообщениеОбъект.ДанныеСообщения = Новый ХранилищеЗначения(Сообщение);
	СообщениеОбъект.ДатаСоздания    = ТекущаяДатаСеанса();

	СообщениеОбъект.Записать();

	//Попытка
	//	УдалитьФайлы(ИмяВременногоФайла);
	//Исключение
	//КонецПопытки;

	РегистрыСведений.СведенияОСообщенияхОбменаСМобильнымиКлиентами.ЗаписатьСведения(
		СообщениеОбъект.Ссылка, 0, 1);

	РегистрыСведений.СтепеньГотовностиСообщенийИнтегрированныхСистем.УстановитьПроцентГотовности(
		СообщениеОбъект.Ссылка, 100);

КонецПроцедуры

// Формирует список по умолчанию форматов передаваемых на мобильный клиент файлов
Функция СписокФорматовФайловПередаваемыхНаМобильныйКлиент() Экспорт

	Массив = Новый Массив();
	Массив.Добавить("txt log ini"); // текстовые файлы
	Массив.Добавить("ico wmf emf"); // иконки и картинки
	Массив.Добавить("htm html url mht mhtml"); // документы интернета
	Массив.Добавить("doc docx dot rtf xls xlsx ppt pptx"); // документы MS Office
	Массив.Добавить("jpg jpeg jp2 jpe bmp dib tif tiff gif png"); // изображения
	Массив.Добавить("pdf"); // файлы PDF
	Массив.Добавить("odt odf odp odg ods"); // документы Open Office

	Возврат ВРег(СтрСоединить(Массив, " "));

КонецФункции 

// Записать ошибку произошедшую во время обмена в протокол работы с пользователем.
//
// Параметры:
//  МобильныйКлиент - ПланОбменаСсылка.Мобильный - Узел обмена с клиентом обмена;
//  ИнформацияОбОшибке	 - ИнформацияОбОшибке - Информация о произошедшей ошибке.
//
Процедура ЗаписатьОшибкуВПротоколПриОбмене(МобильныйКлиент, ИнформацияОбОшибке) Экспорт

	ПредставлениеОшибки = ПодробноеПредставлениеОшибки(ИнформацияОбОшибке);

	Если СтрНайти(ИнформацияОбОшибке.Описание, "info:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьИнформацию(
			СтрЗаменить(ПредставлениеОшибки, "info:", ""),
			Ложь,
			МобильныйКлиент);

	ИначеЕсли СтрНайти(ИнформацияОбОшибке.Описание, "warning:") Тогда
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьПредупреждение(
			СтрЗаменить(ПредставлениеОшибки, "warning:", ""),
			Ложь,
			МобильныйКлиент);

	Иначе
		РегистрыСведений.ПротоколРаботыСМобильнымиКлиентами.ДобавитьОшибку(
			ПредставлениеОшибки,
			Ложь,
			МобильныйКлиент);

	КонецЕсли;

КонецПроцедуры



// Выполняет регистрацию данных на узлах мобильных устройств.
//
Процедура ВыполнитьРегистрациюИзмененийДляМобильныхУстройств() Экспорт

	УзелОбмена = ОбменСМобильнымиСерверПовтИсп.ПолучитьУзелДляРегистрацииДанных();

	УстановитьПривилегированныйРежим(Истина);

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;
		МассивИзмененныхДанных = Новый Массив;

		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		Иначе
			ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		КонецЕсли;

		Для каждого ЭлементДанных Из МассивИзмененныхДанных Цикл

			ОбменСМобильнымиРегистрацияИзмененийСервер.ВыполнитьРегистрациюДанных(ЭлементДанных);

		КонецЦикла;

	КонецЦикла;

КонецПроцедуры



//	Получает массив, содержащий ссылки на элементы справочника, документы, задачи, процессы, 
//	а также наборы регистров сведений, входящие в состав плана обмена указанного узла 
//	и зарегистрированных в данный момент на этом узле.
//
// Параметры:
//  УзелОбмена  - ссылка на узел плана обмена
//
// Возвращаемое значение:
//	Массив - содержит ссылки на справочники и документы, наборы записей регистров, менеджеры констант, 
//		изменения которых были зарегистрированы на указанном узле плана обмена в момент вызова функции.
//
Функция ПолучитьИзмененныеДанные(УзелОбмена, СПометкойУдаления = Ложь) Экспорт

	УстановитьПривилегированныйРежим(Истина);
	МассивИзмененныхДанных = Новый Массив;

	Для Каждого ЭлементСоставаПланаОбмена Из УзелОбмена.Метаданные().Состав Цикл

		МетаданныеЭлемента = ЭлементСоставаПланаОбмена.Метаданные;

		Если ОбщегоНазначения.ЭтоРегистрСведений(МетаданныеЭлемента) Тогда
			ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		ИначеЕсли ОбщегоНазначения.ЭтоКонстанта(МетаданныеЭлемента) Тогда
			ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента);

		Иначе
			ПолучитьИзмененныеДанныеСсылочногоТипа(
				УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, СПометкойУдаления);

		КонецЕсли;

	КонецЦикла;
	
	Возврат МассивИзмененныхДанных;

КонецФункции

Функция ПолучитьИзмененныеДанныеРегистра(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, 
	ТолькоКоличество = Ложь)

	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	// Сначала считываются все наборы значений измерений, соответствующие записям регистра,
	//	изменения которых зарегистрированы на указанном узле плана обмена.
	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%1
		|ИЗ
		|	%2.Изменения КАК ИзмененияДанныхРегистра
		|ГДЕ
		|	ИзмененияДанныхРегистра.Узел = (&Узел)";

	СтрокаРеквизитыВЗапросе = "";
	Измерения = МетаданныеЭлемента.Измерения;
	Для Каждого Измерение Из Измерения Цикл

		СтрокаДляДобавления = 
			"ИзмененияДанныхРегистра." + Измерение.Имя + " Как " + Измерение.Имя;

		Если ЗначениеЗаполнено(СтрокаРеквизитыВЗапросе) Тогда
			СтрокаРеквизитыВЗапросе = СтрокаРеквизитыВЗапросе + ", " + СтрокаДляДобавления;
		Иначе
			СтрокаРеквизитыВЗапросе = СтрокаДляДобавления;
		КонецЕсли;

	КонецЦикла;

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзменения = Новый Запрос;
	ЗапросИзменения.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзменения.Текст = СтрШаблон(
		ТекстЗапроса,
		СтрокаРеквизитыВЗапросе,
		ПолноеИмяМетаданныхЭлемента);

	Выборка = ЗапросИзменения.Выполнить().Выбрать();

	Если Не ТолькоКоличество Тогда

		Пока Выборка.Следующий() Цикл

			ЗапросДанныеРегистра = Новый Запрос;

			// После того, как был считан очередной набор значений измерений регистра,
			//	по этому набору значений формируется набор записей регистра.
			ТекстЗапросаДляЧтенияДанныхРегистра = 
				"ВЫБРАТЬ
				|	%1
				|ИЗ
				|	%2 КАК Регистр
				|%3";

			// Добавление измерений регистра в секцию "Выбрать"
			СтрокаВыбрать = "";
			Для Каждого Измерение Из Измерения Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Измерение.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Измерение.Имя;
				КонецЕсли;
			КонецЦикла;

			// Добавление ресурсов регистра в секцию "Выбрать"
			Ресурсы = МетаданныеЭлемента.Ресурсы;
			Для Каждого Ресурс Из Ресурсы Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Ресурс.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Ресурс.Имя;
				КонецЕсли;
			КонецЦикла;

			// Добавление реквизитов регистра в секцию "Выбрать"
			Реквизиты = МетаданныеЭлемента.Реквизиты;
			Для Каждого Реквизит Из Реквизиты Цикл
				Если ЗначениеЗаполнено(СтрокаВыбрать) Тогда
					СтрокаВыбрать = СтрокаВыбрать + ", " + "Регистр." + Реквизит.Имя;
				Иначе
					СтрокаВыбрать = "Регистр." + Реквизит.Имя;
				КонецЕсли;
			КонецЦикла;

			// Установка отбора в запрос на основании значений измерений регистра
			СтрокаГде = "";
			Для Каждого Измерение Из Измерения Цикл
				Если ЗначениеЗаполнено(СтрокаГде) Тогда
					СтрокаГде = СтрокаГде 
						+ " И " + "Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
				Иначе
					СтрокаГде = "ГДЕ Регистр." + Измерение.Имя + " = &" + Измерение.Имя;
				КонецЕсли;
				ЗапросДанныеРегистра.УстановитьПараметр(Измерение.Имя, Выборка[Измерение.Имя]);
			КонецЦикла;

			// После получения всех данных регистра запросом формируется набор записей регистра,
			// так как дальнейшая обработка данных производится именно над наборами записей.
			НаборЗаписейРегистра = РегистрыСведений[ИмяМетаданныхЭлемента].СоздатьНаборЗаписей();
			Для Каждого Измерение Из Измерения Цикл
				НаборЗаписейРегистра.Отбор[Измерение.Имя].Установить(Выборка[Измерение.Имя]);
			КонецЦикла;

			ЗапросДанныеРегистра.Текст = СтрШаблон(
				ТекстЗапросаДляЧтенияДанныхРегистра,
				СтрокаВыбрать,
				ПолноеИмяМетаданныхЭлемента,
				СтрокаГде);

			ВыборкаДанныеРегистра = ЗапросДанныеРегистра.Выполнить().Выбрать();
			Пока ВыборкаДанныеРегистра.Следующий() Цикл
				НоваяЗапись = НаборЗаписейРегистра.Добавить();
				ЗаполнитьЗначенияСвойств(Новаязапись, ВыборкаДанныеРегистра);
			КонецЦикла;
			
			// Добавление сформированного набора записей регистра в массив измененных данных.
			// Этот массив будет передан в дальнейшую обработку.
			МассивИзмененныхДанных.Добавить(НаборЗаписейРегистра);
			
		КонецЦикла;

	КонецЕсли;
	
	Возврат Выборка.Количество();

КонецФункции

Функция ПолучитьИзмененнуюКонстанту(УзелОбмена, МассивИзмененныхДанных, МетаданныеЭлемента, 
	ТолькоКоличество = Ложь)

	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	ТаблицаИзменения.НомерСообщения
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = (&Узел)";

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзмененияКонстанты = Новый Запрос;
	ЗапросИзмененияКонстанты.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияКонстанты.Текст = СтрШаблон(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента);

	РезультатЗапроса = ЗапросИзмененияКонстанты.Выполнить();
	Если Не РезультатЗапроса.Пустой() Тогда

		Если НЕ ТолькоКоличество Тогда
			МассивИзмененныхДанных.Добавить(Константы[ИмяМетаданныхЭлемента]);
		КонецЕсли;

	КонецЕсли;

	Возврат 1;

КонецФункции

Функция ПолучитьИзмененныеДанныеСсылочногоТипа(УзелОбмена, МассивИзмененныхДанных, 
	МетаданныеЭлемента, СПометкойУдаления = Ложь, ТолькоКоличество = Ложь)

	ИмяМетаданныхЭлемента = МетаданныеЭлемента.Имя;
	ПолноеИмяМетаданныхЭлемента = МетаданныеЭлемента.ПолноеИмя();
	ЭлементЗапроса = 
		?(СПометкойУдаления, "ТаблицаИзменения.Ссылка.ПометкаУдаления КАК ПометкаУдаления,", "");

	ТекстЗапроса = 
		"ВЫБРАТЬ
		|	%2
		|	ТаблицаИзменения.Ссылка
		|ИЗ
		|	%1.Изменения КАК ТаблицаИзменения
		|ГДЕ
		|	ТаблицаИзменения.Узел = (&Узел)";

	Если ТолькоКоличество ИЛИ ТипЗнч(УзелОбмена) = Тип("Массив") Тогда
		ТекстЗапроса = СтрЗаменить(ТекстЗапроса, " = ", " В ");
	КонецЕсли;

	ЗапросИзмененияДанных = Новый Запрос;
	ЗапросИзмененияДанных.УстановитьПараметр("Узел", УзелОбмена);
	ЗапросИзмененияДанных.Текст = СтрШаблон(
		ТекстЗапроса,
		ПолноеИмяМетаданныхЭлемента,
		ЭлементЗапроса);

	РезультатЗапроса = ЗапросИзмененияДанных.Выполнить();
	Выборка = РезультатЗапроса.Выбрать();

	Если Не ТолькоКоличество Тогда

		Пока Выборка.Следующий() Цикл

			Если СПометкойУдаления Тогда

				СтруктураДанных = Новый Структура();
				СтруктураДанных.Вставить("Ссылка", Выборка.Ссылка);
				СтруктураДанных.Вставить("ПометкаУдаления", Выборка.ПометкаУдаления);

				МассивИзмененныхДанных.Добавить(СтруктураДанных);
			Иначе
				МассивИзмененныхДанных.Добавить(Выборка.Ссылка);
			КонецЕсли;

		КонецЦикла;

	КонецЕсли;

	Возврат Выборка.Количество();

КонецФункции
